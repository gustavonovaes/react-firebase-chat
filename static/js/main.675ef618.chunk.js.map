{"version":3,"sources":["App.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","projectId","auth","firestore","SignIn","onClick","provider","GoogleAuthProvider","signInWithPopup","signInWithGoogle","SignOut","currentUser","signOut","ChatRoom","dummy","React","useRef","messagesRef","collection","query","orderBy","limit","useCollectionData","idField","messages","useState","formValue","setFormValue","sendMessage","e","a","preventDefault","uid","photoURL","add","text","createdAt","FieldValue","serverTimestamp","current","scrollIntoView","behavior","map","msg","ChatMessage","key","id","message","ref","onSubmit","value","placeholder","onChange","target","type","messageClass","className","src","alt","App","useAuthState","user","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mTAUAA,IAASC,cAAc,CACrBC,OAAQC,0CACRC,WAAYD,kCACZE,UAAWF,oBAGb,IAAMG,EAAON,IAASM,OAChBC,EAAYP,IAASO,YAiB3B,SAASC,IAMP,OACE,4BAAQC,QAAS,kBANM,WACvB,IAAMC,EAAW,IAAIV,IAASM,KAAKK,mBACnCL,EAAKM,gBAAgBF,GAIEG,KAAvB,uBAIJ,SAASC,IACP,OACER,EAAKS,aAAe,4BAAQN,QAAS,kBAAMH,EAAKU,YAA5B,YAIxB,SAASC,IACP,IAAMC,EAAQC,IAAMC,SAEdC,EAAcd,EAAUe,WAAW,YACnCC,EAAQF,EAAYG,QAAQ,aAAaC,MAAM,IAJnC,EAMCC,YAAkBH,EAAO,CAAEI,QAAS,OAAhDC,EANW,sBAQgBT,IAAMU,SAAS,IAR/B,mBAQXC,EARW,KAQAC,EARA,KAUZC,EAAW,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DAClBD,EAAEE,iBADgB,EAGQ7B,EAAKS,YAAvBqB,EAHU,EAGVA,IAAKC,EAHK,EAGLA,SAHK,SAKZhB,EAAYiB,IAAI,CACpBC,KAAMT,EACNU,UAAWxC,IAASO,UAAUkC,WAAWC,kBACzCN,MACAC,aATgB,OAYlBN,EAAa,IAEbb,EAAMyB,QAAQC,eAAe,CAAEC,SAAU,WAdvB,2CAAH,sDAiBjB,OACE,oCACE,6BACGjB,GACCA,EAASkB,KAAI,SAACC,GAAD,OAAS,kBAACC,EAAD,CAAaC,IAAKF,EAAIG,GAAIC,QAASJ,OAE3D,0BAAMK,IAAKlC,KAGb,0BAAMmC,SAAUrB,GACd,2BACEsB,MAAOxB,EACPyB,YAAa,yBACbC,SAAU,SAACvB,GAAD,OAAOF,EAAaE,EAAEwB,OAAOH,UAGzC,4BAAQI,KAAK,UAAb,UAMR,SAASV,EAAT,GAAmC,IAAZG,EAAW,EAAXA,QACbZ,EAAwBY,EAAxBZ,KAAMH,EAAkBe,EAAlBf,IAAKC,EAAac,EAAbd,SAEbsB,EAAevB,IAAQ9B,EAAKS,YAAYqB,IAAM,OAAS,WAE7D,OACE,yBAAKwB,UAAS,kBAAaD,IACzB,yBAAKE,IAAKxB,EAAUyB,IAAI,aACxB,2BAAIvB,IAKKwB,MA9Ff,WAAgB,IAAD,EACEC,YAAa1D,GAArB2D,EADM,oBAGb,OACE,yBAAKL,UAAU,OACb,gCACE,oEACA,kBAAC9C,EAAD,OAGF,iCAAUmD,EAAO,kBAAChD,EAAD,MAAe,kBAACT,EAAD,SC1BtC0D,IAASC,OAEP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.675ef618.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore';\n\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\n\nfirebase.initializeApp({\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID\n});\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\n\nfunction App() {\n  const [user] = useAuthState(auth);\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>‚öõÔ∏èüî•üí¨</h1>\n        <SignOut />\n      </header>\n\n      <section>{user ? <ChatRoom /> : <SignIn />}</section>\n    </div>\n  );\n}\n\nfunction SignIn() {\n  const signInWithGoogle = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    auth.signInWithPopup(provider);\n  };\n\n  return (\n    <button onClick={() => signInWithGoogle()}>Sign in with Google</button>\n  );\n}\n\nfunction SignOut() {\n  return (\n    auth.currentUser && <button onClick={() => auth.signOut()}>Sign out</button>\n  );\n}\n\nfunction ChatRoom() {\n  const dummy = React.useRef();\n\n  const messagesRef = firestore.collection('messages');\n  const query = messagesRef.orderBy('createdAt').limit(25);\n\n  const [messages] = useCollectionData(query, { idField: 'id' });\n\n  const [formValue, setFormValue] = React.useState('');\n\n  const sendMessage = async (e) => {\n    e.preventDefault();\n\n    const { uid, photoURL } = auth.currentUser;\n\n    await messagesRef.add({\n      text: formValue,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      uid,\n      photoURL,\n    });\n\n    setFormValue('');\n\n    dummy.current.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  return (\n    <>\n      <div>\n        {messages &&\n          messages.map((msg) => <ChatMessage key={msg.id} message={msg} />)}\n\n        <span ref={dummy}></span>\n      </div>\n\n      <form onSubmit={sendMessage}>\n        <input\n          value={formValue}\n          placeholder={'Digite sua mensagem...'}\n          onChange={(e) => setFormValue(e.target.value)}\n        />\n\n        <button type=\"submit\">Send</button>\n      </form>\n    </>\n  );\n}\n\nfunction ChatMessage({ message }) {\n  const { text, uid, photoURL } = message;\n\n  const messageClass = uid === auth.currentUser.uid ? 'sent' : 'received';\n\n  return (\n    <div className={`message ${messageClass}`}>\n      <img src={photoURL} alt=\"user pic\" />\n      <p>{text}</p>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nReactDOM.render(\n\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}